[init]
# Initialize the Python project.
$ setupinit init

[check]
# Get the project version and latest build information.
$ buildver check

[test]
# Run tests.
$ python -m unittest discover -f -s tests -t .

[release]
# Build then release a new version of the project.
# Note: you can extend this command in the CLI to set the next version.
# Example: backstage release then 3.0.0
# Example: backstage release then +maj
interface with buildver
set project_dir = {CWD}
call buildver.get_version(project_dir)
set project_version = {R}
if project_version == EMPTY
    : Failed to get the project version.
    : Release cancelled.
    return
: Project version: {project_version}
: === Documentation generation=== 
$ hyperdoc build
: === Commit documentation update=== 
$ git add .
$ git commit -m "Update"
: === Tagging=== 
$ git tag {project_version}
: === Build distribution package ===
$ buildver build {ARGS}
: === Git push ===
$ git push origin master tag {project_version}
: === Commit version change ===
$ git add .
$ git commit -m "Update"
: === PyPI release === 
$ twine upload --skip-existing dist/*
:
: Done !

[gitinit]
# Initialize a new Git repository then create a new connection to the remote repository.
# Note: the user is prompted to submit the 'origin'.
$ git init
> origin : `Origin: `
$ git remote add origin {origin}

[gitcommit]
# Save your changes to the local repository.
# Note: the user is prompted to submit a commit message.
$ git add .
> msg : `Commit message: `
$ git commit -m {msg}

[gitpush]
# Send the commits from your local Git repository to the remote repository
$ git push origin master

